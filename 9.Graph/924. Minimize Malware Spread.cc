#include "leetcode.h"
class Solution
{
public:
  int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial)
  {
    sort(initial.begin(), initial.end());

    const int n = graph.size();
    vector<int> parents(n);
    iota(parents.begin(), parents.end(), 0);

    auto find = [&parents](int x) -> int {
      while (parents[x] != x) {
        parents[x] = parents[parents[x]];
        x = parents[x];
      }
      return x;
    };
    for (int i = 0; i < n; ++i)
      for (int j = i + 1; j < n; ++j)
        if (1 == graph[i][j])
          parents[find(i)] = parents[find(j)];

    unordered_map<int, set<int>> m;
    for (int i = 0; i < n; ++i)
      m[find(i)].insert(i);

    unordered_map<int, int> counter;
    for (const auto i : initial)
      counter[find(i)]++;

    int ans = initial[0];
    int reduced = 0;

    for (const auto i : initial) {
      auto root = find(i);
      if (counter[root] == 1) {

        if (m[root].size() > reduced) {
          ans = i;
          reduced = m[root].size();
        }
      }
    }
    return ans;
  }
};
